name: "Azure Pipelines"
variables: 
  paths: 
    exclude: 
      - .gitignore
      - workflow-clips/
      - scripts/
      - README.md
  python.version: "3.7.6"
  stages: 
    - 
      jobs: 
        - 
          displayName: "Provision Azure resources"
          job: provision_azure_resources
          pool: 
            vmImage: ubuntu-18.04
          steps: 
            - 
              displayName: "Download terraform.tfvars"
              inputs: 
                secureFile: terraform.tfvars
              name: variable-definitions
              task: DownloadSecureFile@1
        - 
          inputs: 
            knownHostsEntry: known_hosts
            sshKeySecureFile: key-secure-1
            sshPublicKey: $(PUBLIC_KEY)
          task: InstallSSHKey@0
        - 
          bash: "cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test\n"
          displayName: "Copy terraform.tfvars"
        - 
          bash: |
              cd $(Agent.TempDirectory)
              cat key-secure-1.pub
              cd ~/.ssh/
              cat known_hosts
              cd $(Build.SourcesDirectory)
          displayName: "Verifying build env"
        - 
          displayName: "Install Terraform"
          inputs: 
            terraformVersion: "0.13.5"
          task: TerraformInstaller@0
        - 
          displayName: "Terraform Init"
          inputs: 
            backendAzureRmContainerName: tstate
            backendAzureRmKey: terraform.tfstate
            backendAzureRmResourceGroupName: tstate
            backendAzureRmStorageAccountName: tstate24171
            backendServiceArm: arm-servicon
            command: init
            provider: azurerm
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
          task: TerraformTaskV1@0
        - 
          displayName: "Run `terraform apply`"
          inputs: 
            command: apply
            commandOptions: "-auto-approve \n"
            environmentServiceNameAzureRM: arm-servicon
            provider: azurerm
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
          task: TerraformTaskV1@0
        - 
          jobs: 
            - 
              displayName: "Build artifacts"
              job: build_artifacts
              pool: 
                vmImage: ubuntu-18.04
              steps: 
                - 
                  displayName: "Archive FakeRestAPI"
                  inputs: 
                    archiveFile: $(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip
                    archiveType: zip
                    includeRootFolder: false
                    rootFolderOrFile: $(System.DefaultWorkingDirectory)/automated-testing/jmeter/fakerestapi
                    verbose: true
                  task: ArchiveFiles@2
          stage: Build
        - 
          displayName: "Publish FakeRestAPI artifact"
          inputs: 
            artifactName: fakerestapi-atf
            targetPath: $(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip
          task: PublishPipelineArtifact@1
        - 
          displayName: "Archive Selenium"
          inputs: 
            archiveFile: $(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip
            archiveType: zip
            includeRootFolder: false
            rootFolderOrFile: $(System.DefaultWorkingDirectory)/automated-testing/selenium
            verbose: true
          task: ArchiveFiles@2
        - 
          displayName: "Publish Selenium artifact"
          inputs: 
            artifactName: selenium-atf
            targetPath: $(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip
          task: PublishPipelineArtifact@1
        - 
          jobs: 
            - 
              deployment: deployment_fakerestapi
              displayName: "Deploy FakeRestAPI"
              environment: TEST
              pool: 
                vmImage: ubuntu-18.04
              strategy: 
                runOnce: 
                  deploy: 
                    steps: 
                      - 
                        displayName: "Deploy Azure WebApp"
                        inputs: 
                          appName: quality-releases-appservice
                          appType: quality-releases
                          azureSubscription: arm-servicon
                          deploymentMethod: zipDeploy
                          package: $(Pipeline.Workspace)/fakerestapi-atf/fakerestapi-$(Build.BuildId).zip
                        task: AzureWebApp@1
            - 
              deployment: vm-deployment
              displayName: "Deploy virtual machine"
              environment: 
                name: TEST
                resourceType: VirtualMachine
              strategy: 
                runOnce: 
                  deploy: 
                    steps: 
                      - 
                        bash: |
                            #! /bin/bash
                            sudo apt update
                            sudo apt install software-properties-common -y
                            sudo apt-add-repository ppa:universe -y
                            sudo apt-get update
                            sudo apt-get install python3-pip -y
                            sudo apt-get install unzip -y
                            sudo apt-get install -y chromium-browser
                            sudo apt-get install -y chromium-chromedriver
                            python3 -m pip install --upgrade pip
                            pip3 install selenium
                            python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
                            
                            # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
                            # sh onboard_agent.sh -w ${AZ_LOG_ANALYTICS_ID} -s ${AZ_LOG_ANALYTICS_PK}
                            # sudo /opt/microsoft/omsagent/bin/service_control restart ${AZ_LOG_ANALYTICS_ID}
                            env: # Pass secret variables in env variables
                            AZ_LOG_ANALYTICS_ID: $(AZ_LOG_ANALYTICS_ID)
                            AZ_LOG_ANALYTICS_PK: $(AZ_LOG_ANALYTICS_PK)
                            displayName: Configure Selenium
          stage: Deployment
        - 
          jobs: 
            - 
              deployment: test-machine
              displayName: "Test VM"
              environment: 
                name: TEST
                resourceType: VirtualMachine
              strategy: 
                runOnce: 
                  deploy: 
                    steps: 
                      - 
                        bash: |
                            cd $(Pipeline.Workspace)/selenium-atf
                            find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete  # delete everything except 'selenium-$(Build.BuildId).zip'
                            unzip -o selenium-$(Build.BuildId).zip
                            sudo mkdir -p /var/log/selenium
                            sudo chmod 664 /var/log/selenium
                            sudo python3 -u selenium-test.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
                            cd $(System.DefaultWorkingDirectory)
                            mkdir -p log/selenium
                            sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                        displayName: "Run Selenium tests"
                      - 
                        displayName: "Publish logs from Selenium"
                        inputs: 
                          artifactName: selenium-logs-atf
                          targetPath: $(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log
                        task: PublishPipelineArtifact@1
          stage: Test
        - 
          displayName: "Test JMeter"
          job: jmeter-test
          pool: 
            vmImage: ubuntu-18.04
          steps: 
            - 
              bash: |
                  sudo apt-get install openjdk-11-jre-headless -y
                  java -version
                  wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
                  tar xzvf jmeter.tgz
                  apache-jmeter-5.4/bin/jmeter --version
                  mkdir -p log/jmeter
              displayName: "Install JMeter"
        - 
          bash: |
              apache-jmeter-5.4/bin/jmeter -n -t automated-testing/jmeter/stress-test.jmx \
                                          -l log/jmeter/stress-test-result.csv \
                                          -e -f -o log/jmeter/stress-test-html-report \
                                          -j log/jmeter/jmeter-stress-test.log
          displayName: "JMeter stress test"
        - 
          bash: |
              apache-jmeter-5.4/bin/jmeter -n -t automated-testing/jmeter/endurance-test.jmx \
                                          -l log/jmeter/endurance-test-result.csv \
                                          -e -f -o log/jmeter/endurance-test-html-report \
                                          -j log/jmeter/jmeter-endurance-test.log
          displayName: "JMeter endurance test"
        - 
          displayName: "Archive JMeter stress test HTML report"
          inputs: 
            archiveFile: $(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip
            archiveType: zip
            includeRootFolder: false
            rootFolderOrFile: $(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report
            verbose: true
          task: ArchiveFiles@2
        - 
          displayName: "Archive JMeter endurance test HTML report"
          inputs: 
            archiveFile: $(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip
            archiveType: zip
            includeRootFolder: false
            rootFolderOrFile: $(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report
            verbose: true
          task: ArchiveFiles@2
        - 
          bash: |
              rm -rf log/jmeter/stress-test-html-report
              rm -rf log/jmeter/endurance-test-html-report
              cd log/jmeter
              displayName: Delete initial JMeter HTML test reports
        - 
          displayName: "Publish JMeter logs"
          inputs: 
            artifactName: jmeter-logs-atf
            targetPath: $(System.DefaultWorkingDirectory)/log/jmeter
          task: PublishPipelineArtifact@1
        - 
          displayName: "Test Postman with Newman"
          job: newman-test
          pool: 
            vmImage: ubuntu-18.04
          steps: 
            - 
              displayName: "Install Node v12.X"
              inputs: 
                versionSpec: 12.x
              task: NodeTool@0
            - 
              bash: |
                  npm install -g newman
                  newman --version
                  mkdir -p log/newman
              displayName: "Install Newman"
            - 
              bash: |
                  newman run automated-testing/postman/regression-test.json \
                            --reporters cli,junit \
                            --reporter-junit-export log/newman/regression-test.xml \
                            --suppress-exit-code
              displayName: "Newman regression test"
            - 
              bash: |
                  newman run automated-testing/postman/validation-test.json \
                            -e automated-testing/postman/validation-test-env.postman-environment.json \
                            --reporters cli,junit \
                            --reporter-junit-export log/newman/validation-test.xml \
                            --suppress-exit-code
                  ls -la $(System.DefaultWorkingDirectory)/log/newman/
              displayName: "Newman validation test"
            - 
              displayName: "Publish Newman logs"
              inputs: 
                artifactName: drop-newman-logs
                targetPath: $(System.DefaultWorkingDirectory)/log/newman
              task: PublishPipelineArtifact@1
            - 
              displayName: "Publish Newman test results"
              inputs: 
                mergeTestResults: true
                searchFolder: $(System.DefaultWorkingDirectory)/log/newman
                testResultsFiles: "*.xml"
                testRunTitle: "Publish Newman test results"
                testRunner: JUnit
              task: PublishTestResults@2
        - 
          jobs: 
            - 
              displayName: "Destroy all resources"
              job: destroy_all_resources
              pool: 
                vmImage: ubuntu-18.04
              steps: 
                - 
                  displayName: "Download terraform.tfvars"
                  inputs: 
                    secureFile: terraform.tfvars
                  name: variable-definitions
                  task: DownloadSecureFile@1
          stage: Destroy
        - 
          inputs: 
            knownHostsEntry: known_hosts
            sshKeySecureFile: key-secure-1
            sshPublicKey: $(PUBLIC_KEY)
          task: InstallSSHKey@0
        - 
          bash: "cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test\n"
          displayName: "Copy terraform.tfvars"
        - 
          displayName: "Install Terraform"
          inputs: 
            terraformVersion: "0.13.5"
          task: TerraformInstaller@0
        - 
          displayName: "Terraform Init"
          inputs: 
            backendAzureRmContainerName: tstate
            backendAzureRmKey: terraform.tfstate
            backendAzureRmResourceGroupName: tstate
            backendAzureRmStorageAccountName: tstate24171
            backendServiceArm: arm-servicon
            command: init
            provider: azurerm
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
          task: TerraformTaskV1@0
        - 
          displayName: "Terraform Destroy"
          inputs: 
            command: destroy
            commandOptions: "-auto-approve \n"
            environmentServiceNameAzureRM: arm-servicon
            provider: azurerm
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
          task: TerraformTaskV1@0
      stage: Provision
  trigger: 
    - ops
