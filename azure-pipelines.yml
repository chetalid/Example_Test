# File: azure-pipelines.yml
name: Azure Pipelines
variables:
  python.version: '3.7.6'
  trigger: ops

stages: 
- stage: Provision
  jobs:
  - job: provision_azure_resources
    displayName: Provision Azure resources
    pool: Default 
    steps:
    - task: DownloadSecureFile@1
      name: variable_definitions
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars' 
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'AAAAB3NzaC1yc2EAAAADAQABAAABgQC6YS8ss2pO6WGXOEsY0C0InCf6cGM8CrU2s56+X5UKDYqDQ7jVu331W4GzgKoQE0zTUyvQutrohXhGuihy0R81ghh6/3aE+VzJFP+N6vPPHEbu/TPiNoKcy2c5i5zTxo5iMGXiMGJvtXQcDLJEAE5uJTPiQiBCOjBJNRDW1dE1Ymtnx8VkxXZ00hl2s838jwi/tEn3ANiftnVS8rSxP0Zjng+K4HmSdGXf5znX9i1WPwwfInUGzymsozQdoveFVmJ/v3xaRNHiqmXEez2y4P3Y3Ns4LIy8/5iZGigzfoW3CqIkyWPEZvSWvgdMMCsvHANKRZ5kdhZCfGL1kiHPliFThpjW0/0qV/IxJnup+tGT6as21/R/ipjd56+fIOH3KsTYQ7bU1kNc/dQL9beJwdagr/+s6DbeuVYzUleAvKymWNByOJ5HMYFsWnK7sj7qzYcJpJ3wxALJ9l+nFa38nf3bq2uX2SIphZrWZgWOP+RNSBOkqR1b+3ioQrpD8eN+CPU= mlaw@slate'
        sshPublicKey: $(myPubKey)
        sshKeySecureFile: 'id_rsa'

    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    #   displayName: 'Install Terraform 1.0.0'
    #   inputs:
    #     terraformVersion: '1.0.0'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test' 

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.0.0'

    - task: TerraformTaskV1@0
      displayName: 'Terraform : Initialization'
      inputs:
        backendType: 'azurerm'
        command: 'init'
        # commandOptions: |
        #   -reconfigure        
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'                
        backendServiceArm: 'arm-servicon'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate1096'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: CopyFiles@2
      displayName: 'Prepare files for publish'
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)/terraform/environments/test
        Contents: |
          **
          !**\.terraform\** 
        TargetFolder: '$(Build.StagingDirectory)'

    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    #   displayName: 'Terraform : Validation'
    #   inputs:
    #     command: validate
    #     workingDirectory: '/home/azureuser/myagent/_work/_tasks'     

    # - task: TerraformTaskV1@0
    #   displayName: Terraform Init
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     workingDirectory: '$(terraformWorkingDirectory)/terraform/environments/test'                
    #     backendServiceArm: 'arm-servicon'
    #     backendAzureRmResourceGroupName: 'tstate'
    #     backendAzureRmStorageAccountName: 'tstate1096'
    #     backendAzureRmContainerName: 'tstate'
    #     backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTaskV1@0
      displayName: Run `terraform apply`
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'arm-servicon'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build artifacts
    pool: Default 
    steps: 
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automated-testing/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'fakerestapi-atf'
    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automated-testing/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'selenium-atf'

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: Deploy FakeRestAPI
    pool: Default
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'arm-servicon'
              appName: 'quality-releases-appservice'
              appType: 'quality-releases'
              package: $(Pipeline.Workspace)/fakerestapi-atf/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy
  - deployment: vm_deployment
    displayName: Deploy virtual machine
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
          
              #! /bin/bash
              sudo apt update
              sudo apt install software-properties-common -y
              sudo apt-add-repository ppa:universe -y
              sudo apt-get update
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              python3 -m pip install --upgrade pip
              pip3 install selenium
              python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
        
- stage: Test
  jobs:
  - deployment: test_machine
    displayName: Test VM
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              cd $(Pipeline.Workspace)/selenium-atf
              find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete  # delete everything except 'selenium-$(Build.BuildId).zip'
              unzip -o selenium-$(Build.BuildId).zip
              sudo mkdir -p /var/log/selenium
              sudo chmod 664 /var/log/selenium
              sudo python3 -u selenium-test.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
              cd $(System.DefaultWorkingDirectory)
              mkdir -p log/selenium
              sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
            displayName: Run Selenium tests
          - task: PublishPipelineArtifact@1
            displayName: Publish logs from Selenium
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
              artifactName: 'selenium-logs-atf'
  - job: jmeter_test
    displayName: Test JMeter
    pool: Default
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java -version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        apache-jmeter-5.4/bin/jmeter --version
        mkdir -p log/jmeter
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automated-testing/jmeter/stress-test.jmx \
                                    -l log/jmeter/stress-test-result.csv \
                                    -e -f -o log/jmeter/stress-test-html-report \
                                    -j log/jmeter/jmeter-stress-test.log
      displayName: JMeter stress test
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automated-testing/jmeter/endurance-test.jmx \
                                    -l log/jmeter/endurance-test-result.csv \
                                    -e -f -o log/jmeter/endurance-test-html-report \
                                    -j log/jmeter/jmeter-endurance-test.log
      displayName: JMeter endurance test
    - task: ArchiveFiles@2
      displayName: Archive JMeter stress test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Archive JMeter endurance test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - bash: |
        rm -rf log/jmeter/stress-test-html-report
        rm -rf log/jmeter/endurance-test-html-report
        cd log/jmeter
        displayName: Delete initial JMeter HTML test reports
    - task: PublishPipelineArtifact@1
      displayName: Publish JMeter logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'jmeter-logs-atf'
  - job: newman_test
    displayName: Test Postman with Newman
    pool: Default
    steps: 
      - task: NodeTool@0
        displayName: Install Node v12.X
        inputs:
          versionSpec: '12.x'
      - bash: |
          npm install -g newman
          newman --version
          mkdir -p log/newman
        displayName: Install Newman
      - bash: |
          newman run automated-testing/postman/regression-test.json \
                    --reporters cli,junit \
                    --reporter-junit-export log/newman/regression-test.xml \
                    --suppress-exit-code
        displayName: Newman regression test
      - bash: |
          newman run automated-testing/postman/validation-test.json \
                    -e automated-testing/postman/validation-test-env.postman-environment.json \
                    --reporters cli,junit \
                    --reporter-junit-export log/newman/validation-test.xml \
                    --suppress-exit-codazurerm_network_interface.test.ide
          ls -la $(System.DefaultWorkingDirectory)/log/newman/
        displayName: Newman validation test
      - task: PublishPipelineArtifact@1
        displayName: Publish Newman logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
          artifactName: 'drop-newman-logs'
      - task: PublishTestResults@2
        displayName: 'Publish Newman test results'
        inputs:
          testRunner: 'JUnit'
          searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
          testResultsFiles: '*.xml'
          mergeTestResults: true
          testRunTitle: 'Publish Newman test results'
