# File: azure-pipelines.yml
name: Azure Pipelines
variables:
  python.version: '3.7.6'
  trigger: ops

stages: 
- stage: Provision
  jobs:
  - job: provision_az_resources
    displayName: ProvisionAzResources
    pool: Default 
    steps:
    - task: DownloadSecureFile@1
      name: variable_definitions
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars' 
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'AAAAB3NzaC1yc2EAAAADAQABAAABgQCdN9QtteLLWNpGh3ulIaWEe5WSXDaQOzWBR3kD5Fdbk3zMdJEnS6cYoveb0U1cFBT1fNq1iZc4mukpt7IDUNp78R4s6MRnWztMXnbaF9ZesS4jHMpgfRB/KQNvD4mwPO+HjfLHHHCtVOoYzFH9O6sMQdH2krclIWmAyqY/KXPNTAdlEg5BAPKH7FXT0hr300nYa8fNrCUzO6kVqU4tqLjDNX/xISri2YDIB4DuOmLnZIEEeCpMFCAtI1Bz964dLzzW+JgoOrTcqP+Y8BPw0Lz2eo17w5T+37MdUTOA9wdafJoH6pODczAiTGw/2FFB0YEgxe7OZVU+CIxMexBLDFEbjpRhztOOVwVuPeYARyYaoS3KpndyhxWWJMHNRZ5k4b7zk1xnFedYeTpP0Ii0cE/m3+ebiBCL2HcPdEUXHDGzhQVJFR/sLwMZVu9kLk94GDifo1DvTItmKKJe9Icfz5+VtauoiD69xnw709qciyES40tUax9lcZYgeJuAN7YSA+s='
        sshPublicKey: $(myPubKey)
        sshKeySecureFile: 'id_rsa'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'InstallTerraform'
      inputs:
        terraformVersion: '0.15.0'
            
    - task: TerraformTaskV2@2
      displayName: 'Terraform : Initialization'
      inputs:
        provider: "azurerm"
        backendType: 'azurerm'
        command: 'init'
        commandOptions: |
          -reconfigure        
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'                
        backendServiceArm: 'arm-servicon'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate1096'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: CopyFiles@2
      displayName: 'Prepare files for publish'
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)/terraform/environments/test
        Contents: |
          **
          !**\.terraform\** 
        TargetFolder: '$(Build.StagingDirectory)'
        
    - task: TerraformTaskV1@0
      displayName: Run `terraform apply`
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'arm-servicon'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: BuildArtifacts
    pool: Default 
    steps: 
    - task: ArchiveFiles@2
      displayName: ArchiveFakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automated-testing/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: PublishFakeRestAPIArtifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'fakerestapi-atf'
    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automated-testing/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: PublishSeleniumArtifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'selenium-atf'

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: DeployFakeRestAPI
    pool: Default
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: DeployAzureWebApp
            inputs:
              azureSubscription: 'arm-servicon'
              appName: 'quality-releases-appservice'
              appType: 'quality-releases'
              package: $(Pipeline.Workspace)/fakerestapi-atf/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy
  - deployment: deploy_to_vm
    displayName: DeployAppToVM
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
          
              #! /bin/bash
              sudo apt update
              sudo apt install software-properties-common -y
              sudo apt-add-repository ppa:universe -y
              sudo apt-get update
              sudo apt-get install python3-pip -y
              sudo apt-get install zip unzip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              sudo python3 -m pip install --upgrade pip
              wget https://files.pythonhosted.org/packages/ed/9c/9030520bf6ff0b4c98988448a93c04fcbd5b13cd9520074d8ed53569ccfe/selenium-3.141.0.tar.gz
              tar -zxvf selenium-3.141.0.tar.gz 
              cd selenium-3.141.0/
              python3 setup.py install

              # sudo pip3 install -U selenium              
              # sudo python3 -m pip install selenium
              # cd ~/Download
              # tar -zxvf selenium-3.141.0.tar.gz 
              # cd selenium-3.141.0/
              # python3 setup.py install
              # sudo pip3 install selenium

              python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
              export PATH=$PATH:/usr/lib/chromium-browser/       

- stage: Test
  jobs:
  - deployment: run_ui_tests
    displayName: RunUITestsOnApp
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              cd $(Pipeline.Workspace)/selenium-atf
              find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete 
              unzip -o $(Pipeline.Workspace)/selenium-atf/selenium-$(Build.BuildId) -d .
              sudo mkdir -p /var/log/selenium && sudo chmod 664 /var/log/selenium
              sudo python3 -u run_ui_tests.py | sudo dd of=/var/log/selenium/ui_tests.log
              cd $(System.DefaultWorkingDirectory)
              mkdir -p log/selenium
              sudo cp /var/log/selenium/ui_tests.log log/selenium/ui_tests.log
            displayName: Execute UI functional tests using Selenium
          - task: PublishPipelineArtifact@1
            displayName: Publish logs from Selenium tests
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/ui_tests.log'
              artifactName: 'selenium-logs-atf'
  - job: newman_test
    displayName: TestPostmanWithNewman
    pool: Default
    steps: 
      - task: NodeTool@0
        displayName: Install Node v12.X
        inputs:
          versionSpec: '12.x'
      - bash: |
          npm install -g newman
          newman --version
          mkdir -p log/newman
        displayName: Install Newman
      - bash: |
          newman run automated-testing/postman/regression-test.json \
                    --reporters cli,junit \
                    --reporter-junit-export log/newman/regression-test.xml \
                    --suppress-exit-code
        displayName: Regression tests
      - bash: |
          newman run automated-testing/postman/validation-test.json \
                    --reporters cli,junit \
                    --reporter-junit-export log/newman/validation-test.xml
          ls -la $(System.DefaultWorkingDirectory)/log/newman/
        displayName: Data validation tests
      - task: PublishPipelineArtifact@1
        displayName: Publish Newman logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
          artifactName: 'drop-newman-logs'
      - task: PublishTestResults@2
        displayName: 'Publish Newman test results'
        inputs:
          testRunner: 'JUnit'
          searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
          testResultsFiles: '*.xml'
          mergeTestResults: true
          testRunTitle: 'Publish Newman test results'
  - job: jmeter_test
    displayName: LoadTesting
    pool: Default
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java --version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        apache-jmeter-5.4/bin/jmeter --version
        mkdir -p log/jmeter
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automated-testing/jmeter/stress-test.jmx \
                                    -l log/jmeter/stress-test-result.csv \
                                    -e -f -o log/jmeter/stress-test-html-report \
                                    -j log/jmeter/jmeter-stress-test.log
      displayName: JMeter Stress Test
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automated-testing/jmeter/endurance-test.jmx \
                                    -l log/jmeter/endurance-test-result.csv \
                                    -e -f -o log/jmeter/endurance-test-html-report \
                                    -j log/jmeter/jmeter-endurance-test.log
      displayName: JMeter Endurance Test
    - task: ArchiveFiles@2
      displayName: Archive JMeter Stress Test HTML Report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Archive JMeter endurance test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - bash: |
        rm -rf log/jmeter/stress-test-html-report
        rm -rf log/jmeter/endurance-test-html-report
        cd log/jmeter/
      displayName: Delete initial JMeter HTML test reports
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'jmeter-logs-atf'
      displayName: Publish logs from JMeter tests
