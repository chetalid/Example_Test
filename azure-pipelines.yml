# File: azure-pipelines.yml
name: Azure Pipelines
variables:
  python.version: '3.7.6'
  trigger: ops

stages: 
# - stage: Test
#   jobs:
#   - job: functional_test
#     displayName: FunctionalTests
#     environment:
#       name:  'myTestEnvironment'
#       resourceType: VirtualMachine
#       tags: myVM
#     steps:
#       - task: CmdLine@2
#         inputs:
#           script: |
#             sudo apt update
#             sudo apt install software-properties-common -y
#             sudo apt-add-repository ppa:universe -y
#             sudo apt-get update
#             sudo apt-get install zip unzip -y
#             sudo apt-get install -y chromium-browser
#             sudo apt-get install -y chromium-chromedriver
#             python3 -m pip install --upgrade pip 
#             python3 -m pip install selenium 
#             python3 -m pip install pdfplumber 
#             python3 -m pip install pandas
#             python3 -m pip install webdriver-manager
#       - task: CmdLine@2
#         inputs:
#           script: 'python3 $(System.DefaultWorkingDirectory)/automated-testing/selenium/run_ui_tests.py'
          
- stage: Provision
  jobs:
  - job: provision_az_resources
    displayName: ProvisionAzResources
    pool: 
     vmImage: ubuntu-20.04 
    steps:
    
    
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.2.7'
            
    - task: TerraformTaskV2@2
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-reconfigure'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'servconn'
        backendAzureRmResourceGroupName: 'azuredevops'
        backendAzureRmStorageAccountName: 'storagefree1231'
        backendAzureRmContainerName: 'mycontainer'
        backendAzureRmKey: 'terraform.tfstate'

    - task: CopyFiles@2
      displayName: 'Prepare files for publish'
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)/terraform/environments/test
        Contents: |
          **
          !**\.terraform\** 
        TargetFolder: '$(Build.StagingDirectory)'
        
    - task: TerraformTaskV1@0
      displayName: Run `terraform apply`
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'servconn'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: BuildArtifacts
    pool: 
      vmImage: ubuntu-20.04 
    steps: 
    - task: ArchiveFiles@2
      displayName: ArchiveFakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automated-testing/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: PublishFakeRestAPIArtifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'fakerestapi-atf'
    - task: ArchiveFiles@2
      displayName: ArchiveSelenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automated-testing/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: PublishSeleniumArtifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'selenium-atf'

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: DeployFakeRestAPI
    pool: 
      vmImage: ubuntu-20.04
    environment: 'myTestEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: DeployAzureWebApp
            inputs:
              azureSubscription: 'servconn'
              appName: 'webapp--AppService-123'
              appType: 'webapp'
              package: $(Pipeline.Workspace)/fakerestapi-atf/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy
    
- stage: Tests
  jobs:

  - job: newman_test
    displayName: IntegrationTests
    pool: 
      vmImage: ubuntu-20.04
    steps: 
      - task: NodeTool@0
        displayName: Install Node v12.X
        inputs:
          versionSpec: '12.x'
      - bash: |
          npm install -g newman
          newman --version
          mkdir -p log/newman
        displayName: Install Newman
      - bash: |
          newman run automated-testing/postman/RegressionTests.postman_collection.json \
                    --reporters cli,junit \
                    --reporter-junit-export log/newman/RegressionTests.xml \
                    --suppress-exit-code
        displayName: Regression tests
      - bash: |
          newman run automated-testing/postman/ValidationTests.postman_collection.json \
                    --reporters cli,junit \
                    --reporter-junit-export log/newman/ValidationTests.xml
          ls -la $(System.DefaultWorkingDirectory)/log/newman/
        displayName: Data validation tests
      - task: PublishPipelineArtifact@1
        displayName: Publish Newman logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
          artifactName: 'newman-logs-atf'
      - task: PublishTestResults@2
        displayName: 'Publish Newman test results'
        inputs:
          testRunner: 'JUnit'
          searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
          testResultsFiles: '*.xml'
          mergeTestResults: true
          testRunTitle: 'PublishNewmanTestResults'
  - job: performance_tests
    displayName: PerformanceTests
    pool: 
      vmImage: ubuntu-20.04
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java --version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        apache-jmeter-5.4/bin/jmeter --version
        mkdir -p log/jmeter
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automated-testing/jmeter/stress-test.jmx \
                                    -l log/jmeter/stress-test-result.jtl \
                                    -e -f -o log/jmeter/stress-test-html-report \
                                    -j log/jmeter/jmeter-stress-test.log
        cat log/jmeter/jmeter-stress-test.log
      displayName: Spike Test
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automated-testing/jmeter/endurance-test.jmx \
                                    -l log/jmeter/endurance-test-result.jtl \
                                    -e -f -o log/jmeter/endurance-test-html-report \
                                    -j log/jmeter/jmeter-endurance-test.log
        cat log/jmeter/jmeter-endurance-test.log                             
      displayName: Endurance Test
    - task: ArchiveFiles@2
      displayName: Archive JMeter Stress Test HTML Report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Archive JMeter endurance test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - bash: |
        rm -rf log/jmeter/stress-test-html-report
        rm -rf log/jmeter/endurance-test-html-report
        cd log/jmeter/
      displayName: Delete initial JMeter HTML test reports
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'jmeter-logs-atf'
      displayName: Publish logs from JMeter tests  
 
          
  - deployment: Functional
    displayName: 'Functional UI Tests'
    environment:
      name:  'myTestEnvironment'
      resourceType: VirtualMachine
      tags: myVM
    strategy:
      runOnce:
        deploy:
          steps:
          
          - download: current
            artifact: drop-ui-tests

          - task: Bash@3

            displayName: 'Selenium Tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                echo 'Hello from a custom VM with pre-installed Selenium, Chromium-browser & Chromedriver!'
                source env/bin/activate
                export PATH=$PATH:`pwd` # add chromedriver executable to path
                python3 $(System.DefaultWorkingDirectory)/automated-testing/selenium/run_ui_tests.py
                cat selenium.log